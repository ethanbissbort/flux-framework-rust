// src/modules/sysctl.rs
// Autogenerated stub (2025‑06‑05). Replace TODOs with real logic.

use crate::config::Config;
use crate::error::{FluxError, Result};
use crate::modules::{Module, ModuleBase, ModuleInfo};
use async_trait::async_trait;

pub struct SysctlModule {
    base: ModuleBase,
}

impl SysctlModule {
    pub fn new() -> Self {
        let info = ModuleInfo {
            name: "sysctl".to_string(),
            description: "Kernel sysctl hardening parameters".to_string(),
            version: "0.1.0".to_string(),
            author: "Flux Contributors".to_string(),
            tags: vec!["security".to_string()],
            requires_root: true,
            supported_distros: vec!["all".to_string()],
        };
        Self { base: ModuleBase { info } }
    }
}

#[async_trait]
impl Module for SysctlModule {
    fn name(&self) -> &str { &self.base.info.name }
    fn description(&self) -> &str { &self.base.info.description }
    fn version(&self) -> &str { &self.base.info.version }
    fn is_available(&self) -> bool { true }
    fn help(&self) -> String {
        format!("{} module is not yet implemented.", self.name())
    }
    async fn execute(&self, _args: Vec<String>, _config: &Config) -> Result<()> {
        Err(FluxError::Module(format!("{} module not implemented", self.name())))
    }
}

// ----------------------------------------------------------
